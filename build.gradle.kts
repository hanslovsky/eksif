/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

group = "me.hanslovsky"
val projectVersion: String by project
version = projectVersion
description = "EXIF tools for the command line."

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.3.70"

    // Apply the application plugin to add support for building a CLI application.
    application

    `ivy-publish`
    `maven-publish`
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // image meta data extraction
    val metaDataExtractorVersion: String by project
    implementation("com.drewnoakes:metadata-extractor:$metaDataExtractorVersion")

    // cl args parsing
    val picocliVersion: String by project
    implementation("info.picocli:picocli:$picocliVersion")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")

    // Use MockK for mocking
    val mockkVersion: String by project
    testImplementation("io.mockk:mockk:${mockkVersion}")

}

application {
    // Define the main class for the application.
    mainClassName = "me.hanslovsky.eksif.Eksif"
}

publishing {
    publications {
        create<IvyPublication>("publishIvy") {
            artifact(tasks.distZip.get())
            artifact(tasks.distTar.get())
        }
    }
    publications {
        create<MavenPublication>("publishMaven") {
            artifact(tasks.distZip.get())
            artifact(tasks.distTar.get())
            version = projectVersion
            groupId = group as String
            artifactId = rootProject.name
            pom.withXml {
                asNode().let { root ->
                    root.appendNode("packaging", "jar")
                    root.appendNode("name", rootProject.name)
                    root.appendNode("description", description)
                    root.appendNode("url", "http://hanslovsky.me")
                    root.appendNode("inceptionYear","2020")
//                    root.children().last() + pomConfig
                }
            }

        }
    }
}